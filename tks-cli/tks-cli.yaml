apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tks-cli
  namespace: argo
spec:
  arguments:
    parameters:
    - name: tks_api_url
      value: "http://tks-api.tks.svc:9110"
  templates:
  - name: login-tks-api
    container:
      name: login-tks-api
      image: harbor-cicd.taco-cat.xyz/tks/tks-e2e-test:v2.1.5
      envFrom:
      - secretRef:
          name: "tks-api-secret"       
      command:
        - /bin/bash
        - '-exc'
        - |
          tks login {{workflow.parameters.tks_api_url}} --organization-id ${ORGANIZATION_ID} --account-id ${ACCOUNT_ID} --password ${PASSWORD}
          tks cluster list

  - name: create-organization
    inputs:
      parameters:
      - name: organization_name
      - name: creator
      - name: description
    container:
      name: create-organization
      image: harbor-cicd.taco-cat.xyz/tks/tks-e2e-test:v2.1.5
      envFrom:
      - secretRef:
          name: "tks-api-secret"       
      command:
        - /bin/bash
        - '-exc'
        - |
          tks login {{workflow.parameters.tks_api_url}} --organization-id ${ORGANIZATION_ID} --account-id ${ACCOUNT_ID} --password ${PASSWORD}

          CT_NAME="{{inputs.parameters.organization_name}}"
          echo "* Create $CT_NAME organization"
          OUTPUT=$(tks organization create ${CT_NAME} --description "{{inputs.parameters.description}}" | grep Success)
          if [ "$OUTPUT" = "" ]; then
            exit 1
          fi
          sleep 1m

          CT_ID=$(echo $OUTPUT | cut -d ':' -f3 | cut -d ']' -f1)
          echo $CT_ID | tee /mnt/out/organization_id.txt

          OUTPUT=$(tks cloud-account create ${CT_NAME}-ca --access-key-id TODO_CICD_AWS_ACCESS_KEY_ID --secret-access-key TODO_CICD_AWS_SECRET_KEY_ID -o ${CT_ID} | grep cloudAccountId)
          if [ "$OUTPUT" = "" ]; then
            exit 1
          fi

          CA_ID=$(echo $OUTPUT | awk '{print $3}')
          echo $CA_ID | tee /mnt/out/cloud_account_id.txt

      volumeMounts:
        - name: out
          mountPath: /mnt/out
    volumes:
      - name: out
        emptyDir: { }
    outputs:
      parameters:
      - name: organization-id
        valueFrom:
          default: "Something wrong"
          path: /mnt/out/organization_id.txt
      - name: cloud-account-id
        valueFrom:
          default: "Something wrong"
          path: /mnt/out/cloud_account_id.txt


  - name: create-usercluster
    inputs:
      parameters:
      - name: cluster_name
      - name: stack_template_id
      - name: organization_id
      - name: cloud_account_id
      - name: creator
      - name: description
      - name: infra_conf
    container:
      name: create-usercluster
      image: harbor-cicd.taco-cat.xyz/tks/tks-e2e-test:v2.1.5
      envFrom:
      - secretRef:
          name: "tks-api-secret"       
      command:
        - /bin/bash
        - '-exc'
        - |
          tks login {{workflow.parameters.tks_api_url}} --organization-id ${ORGANIZATION_ID} --account-id ${ACCOUNT_ID} --password ${PASSWORD}

          echo "infra_conf : {{inputs.parameters.infra_conf}}"

          CP_NODE_CNT=$(echo "{{inputs.parameters.infra_conf}}" | jq -r '.cpNodeCnt')
          TKS_NODE_CNT=$(echo "{{inputs.parameters.infra_conf}}" | jq -r '.tksNodeCnt')
          USER_NODE_CNT=$(echo "{{inputs.parameters.infra_conf}}" | jq -r '.userNodeCnt')

          CL_NAME="{{inputs.parameters.cluster_name}}"
          echo "* Create $CL_NAME cluster"
          tks cluster create ${CL_NAME} \
            --stack-template-id "{{inputs.parameters.stack_template_id}}" \
            --organization-id "{{inputs.parameters.organization_id}}" \
            --cloud-account-id "{{inputs.parameters.cloud_account_id}}" \
            --description "{{inputs.parameters.description}}" \
            --cp-node-cnt $CP_NODE_CNT \
            --tks-node-cnt $TKS_NODE_CNT \
            --user-node-cnt $USER_NODE_CNT

          threshold=60
          for i in $(seq 1 $threshold)
          do
            CL_STATUS=$(tks cluster list "{{inputs.parameters.organization_id}}" | grep $CL_NAME | awk '{ print $4 }')
            if [ "$CL_STATUS" = "RUNNING" ]; then
              break
            elif [ "$CL_STATUS" = "ERROR" ]; then
              exit 1
            fi

            if [ "$i" -ge "$threshold" ]; then
              echo "Timed out waiting for user-cluster to be ready."
              exit 1
            fi
            sleep 1m
          done

          tks cluster list "{{inputs.parameters.organization_id}}" | grep $CL_NAME | awk '{print $3}' | tee /mnt/out/cluster_id.txt
      volumeMounts:
        - name: out
          mountPath: /mnt/out
    volumes:
      - name: out
        emptyDir: { }
    outputs:
      parameters:
      - name: cluster-id
        valueFrom:
          default: "Something wrong"
          path: /mnt/out/cluster_id.txt

  - name: delete-usercluster
    inputs:
      parameters:
      - name: organization_id
      - name: cluster_id
    container:
      name: delete-usercluster
      image: harbor-cicd.taco-cat.xyz/tks/tks-e2e-test:v2.1.5
      envFrom:
      - secretRef:
          name: "tks-api-secret"       
      command:
        - /bin/bash
        - '-exc'
        - |
          tks login {{workflow.parameters.tks_api_url}} --organization-id ${ORGANIZATION_ID} --account-id ${ACCOUNT_ID} --password ${PASSWORD}
          tks cluster delete {{inputs.parameters.cluster_id}}

          threshold=30
          for i in $(seq 1 $threshold)
          do
            CL_EXIST=$(tks cluster list -o "{{inputs.parameters.organization_id}}" | grep {{inputs.parameters.cluster_id}} | wc -l)
            if [ "$CL_EXIST" = "0" ]; then
              break
            fi

            CL_STATUS=$(tks cluster list -o "{{inputs.parameters.organization_id}}" | grep {{inputs.parameters.cluster_id}} | awk '{ print $4 }')
            if [ "$CL_STATUS" = "DELETED" ]; then
              break
            elif [ "$CL_STATUS" = "ERROR" ]; then
              exit 1
            fi

            if [ "$i" -ge "$threshold" ]; then
              echo "Timed out waiting for user-cluster to be deleted."
              exit 1
            fi
            sleep 1m
          done

  - name: create-appgroup
    inputs:
      parameters:
      - name: cluster_id
      - name: name
      - name: type
      - name: creator
      - name: description
    container:
      name: create-appgroup
      image: harbor-cicd.taco-cat.xyz/tks/tks-e2e-test:v2.1.5
      envFrom:
      - secretRef:
          name: "tks-api-secret"       
      command:
        - /bin/bash
        - '-exc'
        - |
          tks login {{workflow.parameters.tks_api_url}} --organization-id ${ORGANIZATION_ID} --account-id ${ACCOUNT_ID} --password ${PASSWORD}
          tks appgroup create --name "{{inputs.parameters.name}}" --cluster-id "{{inputs.parameters.cluster_id}}" --type "{{inputs.parameters.type}}" --description "{{inputs.parameters.description}}"

          threshold=30
          for i in $(seq 1 $threshold)
          do
            STATUS=$(tks appgroup list {{inputs.parameters.cluster_id}} | grep {{inputs.parameters.name}} | awk '{print $5}')
            if [ "$STATUS" = "RUNNING" ]; then
              break
            elif [ "$STATUS" = "ERROR" ]; then
              exit 1
            fi

            if [ "$i" -ge "$threshold" ]; then
              echo "Timed out waiting for {{inputs.parameters.name}} to be ready."
              exit 1
            fi
            sleep 1m
          done

          echo $(tks appgroup list {{inputs.parameters.cluster_id}} | grep {{inputs.parameters.name}} | awk '{print $3}') | tee /mnt/out/appgroup_id.txt
      volumeMounts:
        - name: out
          mountPath: /mnt/out
    volumes:
      - name: out
        emptyDir: { }
    outputs:
      parameters:
      - name: appgroup_id
        valueFrom:
          default: "Something wrong"
          path: /mnt/out/appgroup_id.txt

  - name: delete-appgroup
    inputs:
      parameters:
      - name: cluster_id
      - name: name
      - name: appgroup_id
    container:
      name: delete-appgroup
      image: harbor-cicd.taco-cat.xyz/tks/tks-e2e-test:v2.1.5
      envFrom:
      - secretRef:
          name: "tks-api-secret"       
      command:
        - /bin/bash
        - '-exc'
        - |
          tks login {{workflow.parameters.tks_api_url}} --organization-id ${ORGANIZATION_ID} --account-id ${ACCOUNT_ID} --password ${PASSWORD}
          tks appgroup delete {{inputs.parameters.appgroup_id}}

          threshold=30
          for i in $(seq 1 $threshold)
          do
            EXIST=$(tks appgroup list {{inputs.parameters.cluster_id}} | grep {{inputs.parameters.appgroup_id}} | wc -l)
            if [ "$EXIST" = "0" ]; then
              break
            fi

            STATUS=$(tks appgroup list {{inputs.parameters.cluster_id}} | grep {{inputs.parameters.name}} | awk '{print $5}')
            if [ "$STATUS" = "DELETED" ]; then
              break
            elif [ "$STATUS" = "ERROR" ]; then
              exit 1
            fi

            if [ "$i" -ge "$threshold" ]; then
              echo "Timed out waiting for {{inputs.parameters.name}} to be deleted."
              exit 1
            fi
            sleep 1m
          done

  - name: get-appgroup-id
    inputs:
      parameters:
      - name: cluster_id
      - name: name
    container:
      name: get-appgroup-id
      image: harbor-cicd.taco-cat.xyz/tks/tks-e2e-test:v2.1.5
      envFrom:
      - secretRef:
          name: "tks-api-secret"       
      command:
        - /bin/bash
        - '-exc'
        - |
          tks login {{workflow.parameters.tks_api_url}} --organization-id ${ORGANIZATION_ID} --account-id ${ACCOUNT_ID} --password ${PASSWORD}

          echo $(tks appgroup list {{inputs.parameters.cluster_id}} | grep {{inputs.parameters.name}} | awk '{print $3}') | tee /mnt/out/appgroup_id.txt
      volumeMounts:
        - name: out
          mountPath: /mnt/out
    volumes:
      - name: out
        emptyDir: { }
    outputs:
      parameters:
      - name: appgroup_id
        valueFrom:
          default: "Something wrong"
          path: /mnt/out/appgroup_id.txt
