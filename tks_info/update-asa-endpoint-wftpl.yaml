apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  # what about UpdateApp? 
  name: update-tks-asa-endpoint
  namespace: argo
spec:
  entrypoint: updateTksAsaEndpoint
  arguments:
    parameters:
    - name: tks_info_host
      value: "http://tks-api.tks.svc:9110"
  templates:
  - name: updateTksAsaEndpoint
    inputs:
      parameters:
      - name: organization_id
      - name: asa_id
      - name: asa_task_id
      - name: endpoint
      - name: preview_endpoint
      - name: helm_revision
    script:
      image: harbor-cicd.taco-cat.xyz/tks/centos-tks-api:v1.0
      command: ["python"]
      env:
      - name: PYTHONPATH
        value: "/opt/protobuf/:/opt/rh/rh-python38/root/lib/python3.8/site-packages/:/opt/app-root/lib/python3.8/site-packages/"
      envFrom:
      - secretRef:
          name: "git-svc-token"
      - secretRef:
          name: "tks-api-secret"
      source: |
        import os
        import requests
        import sys


        TKS_API_URL = '{{workflow.parameters.tks_info_host}}'
        ORG_ID = '{{inputs.parameters.organization_id}}'
        APP_ID = '{{inputs.parameters.asa_id}}'
        TASK_ID = '{{inputs.parameters.asa_task_id}}'
        ENDPOINT_URL = '{{inputs.parameters.endpoint}}'
        PREVIEW_ENDPOINT_URL = '{{inputs.parameters.preview_endpoint}}'
        HELM_REVISION = '{{inputs.parameters.helm_revision}}'


        def getToken():
          data = {
            'organizationId': os.environ['ORGANIZATION_ID'],
            'accountId': os.environ['ACCOUNT_ID'],
            'password': os.environ['PASSWORD']
          }

          res = requests.post(TKS_API_URL + '/api/1.0/auth/login', json=data)
          if res.status_code != 200:
            sys.exit('Failed to login')
          res_json = res.json()
          return res_json['user']['token']


        TOKEN = getToken()
        uri = '/api/1.0/organizations/%s/app-serve-apps/%s/endpoint' % (ORG_ID, APP_ID)
        data = {
          'taskId': TASK_ID,
          'endpointUrl': ENDPOINT_URL,
          'previewEndpointUrl': PREVIEW_ENDPOINT_URL,
          'helmRevision': int(HELM_REVISION)
        }
        res = requests.patch(TKS_API_URL + uri,
                            headers={"Authorization": "Bearer " + TOKEN},
                            json=data)
        if res.status_code != 200:
          print('text: {}\n'.format(res.text))
          sys.exit('Failed to update endpoint')

        res_json = res.json()
        print(res_json)
