apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tks-lma-federation
  namespace: argo
spec:
  entrypoint: deployLMA
  arguments:
    parameters:
    - name: site_name
      value: "coyar0qx1"
    - name: logging_component
      value: "loki"
    - name: object_store
      value: "s3"
    - name: github_account
      value: "decapod10"
    - name: manifest_repo_url
      value: "https://github.com/decapod10/coyar0qx1-manifests"
    - name: revision
      value: "main"
    - name: organization_id
      value: "ovbxm7jvf"
    - name: app_prefix
      value: "{{workflow.parameters.site_name}}"
    - name: keycloak_url
      value: "https://tks-console-dev.taco-cat.xyz"
    - name: console_url
      value: "https://tks-console-dev.taco-cat.xyz"
    - name: alert_tks
      value: "https://tks-api-dev.taco-cat.xyz/system-api/1.0/alerts"
    - name: alert_slack
      value: "https://hooks.slack.com/services/fixme"
    ##########################
    # For tks-info task #
    ##########################
    - name: tks_info_host
      value: "http://tks-api.tks.svc:9110"
    - name: cluster_id
      value: "coyar0qx1"
    - name: app_group_id
      value: "a4z9mqwew"
    - name: base_repo_branch
      value: develop
    - name: cloud_account_id
      value: ""

  volumes:
  - name: tks-proto-vol
    configMap:
      name: tks-proto
  - name: kubeconfig-adm
    secret:
      secretName: tks-admin-kubeconfig-secret
  templates:
  - name: deployLMA
    steps:
    - - name: createNamespace
        template: createNamespace
        arguments:
          parameters:
          - name: target_namespace
            value: lma

    - - name: get-clusters-in-contract
        templateRef:
          name: tks-primary-cluster
          template: sub-get-cluster

    - - name: set-this-to-primary-cluster
        templateRef:
          name: tks-primary-cluster
          template: set-primary-cluster
        arguments:
          parameters:
          - name: primary_cluster
            value: '{{steps.get-clusters-in-contract.outputs.parameters.primary_cluster}}'
          - name: member_clusters
            value: '{{steps.get-clusters-in-contract.outputs.parameters.member_clusters}}'
        when: "{{steps.get-clusters-in-contract.outputs.parameters.primary_cluster}} == ''"

    - - name: organization-level-update
        templateRef:
          name: tks-primary-cluster
          template: change-logging-target
        arguments:
          parameters:
          - name: primary_cluster
            value: '{{steps.get-clusters-in-contract.outputs.parameters.primary_cluster}}'
          - name: member_clusters
            value: '{{workflow.parameters.cluster_id}}'
        when: "{{steps.get-clusters-in-contract.outputs.parameters.primary_cluster}} != '' && {{workflow.parameters.cluster_id}} != {{steps.get-clusters-in-contract.outputs.parameters.primary_cluster}}"

    - - name: determine-if-a-mananged-cluster
        template: determineIfaManagedCluster
        arguments:
          parameters:
          - name: cluster_id
            value: "{{workflow.parameters.cluster_id}}"

    - - name: installApps
        templateRef:
          name: lma-federation
          template: deploy
        arguments:
          parameters:
          - name: is_mananged_cluster
            value: "{{steps.determine-if-a-mananged-cluster.outputs.parameters.managed_cluster}}"

    - - name: update-eps-for-thanos
        templateRef:
          name: tks-primary-cluster
          template: update-eps-for-thanos
        arguments:
          parameters:
          - name: primary_cluster
            value: '{{steps.get-clusters-in-contract.outputs.parameters.primary_cluster}}'
          - name: member_clusters
            value: '{{steps.get-clusters-in-contract.outputs.parameters.member_clusters}}'

    - - name: create-keycloak-client
        template: create-keycloak-client
        arguments:
          parameters:
          - name: organization_id
            value: '{{workflow.parameters.organization_id}}'
          - name: cluster_id
            value: '{{workflow.parameters.cluster_id}}'
          - name: keycloak_url
            value: '{{workflow.parameters.keycloak_url}}'

    - - name: update-auth-oidc-grafana
        template: update-auth-oidc-grafana
        arguments:
          parameters:
          - name: organization_id
            value: '{{workflow.parameters.organization_id}}'
          - name: cluster_id
            value: '{{workflow.parameters.cluster_id}}'
          - name: console_url
            value: '{{workflow.parameters.console_url}}'
          - name: keycloak_client_secret
            value: '{{steps.create-keycloak-client.outputs.parameters.keycloak_client_secret}}'
          - name: grafana_endpoint
            value: '{{steps.create-keycloak-client.outputs.parameters.grafana_endpoint}}'

    - - name: update-appgroup-grafana-eps
        templateRef:
          name: tks-update-appgroup
          template: updateTksAppGroup
        arguments:
          parameters:
          - name: endpoint
            value: '{{steps.create-keycloak-client.outputs.parameters.grafana_endpoint}}'
          - name: app_type
            value: GRAFANA

    - - name: render-auth-oidc-grafana
        templateRef:
          name: event-gitea-render-manifests
          template: main
        arguments:
          parameters:
          - name: decapod_site_repo
            value: "{{workflow.parameters.github_account}}/{{workflow.parameters.cluster_id}}"
          - name: base_repo_branch
            value: "{{ workflow.parameters.base_repo_branch }}"

    - - name: argocd-sync-wait
        template: argocd-sync-wait
        arguments:
          parameters:
          - name: cluster_id
            value: '{{workflow.parameters.cluster_id}}'

    - - name: grafana-restart
        template: grafana-restart
        arguments:
          parameters:
          - name: cluster_id
            value: '{{workflow.parameters.cluster_id}}'

  #######################
  # Template Definition #
  #######################
  - name: createNamespace
    inputs:
      parameters:
        - name: target_namespace
    container:
      name: create-namespace
      image: harbor-cicd.taco-cat.xyz/tks/hyperkube:v1.18.6
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }

          kube_secret=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-tks-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
          echo -e "kube_secret:\n$kube_secret" | head -n 5
          cat <<< "$kube_secret" > /etc/kubeconfig

          kubectl --kubeconfig=/etc/kubeconfig get ns ${TARGET_NAMESPACE}
          if [[ $? =~ 1 ]]; then
            kubectl --kubeconfig=/etc/kubeconfig create ns ${TARGET_NAMESPACE}
            kubectl --kubeconfig=/etc/kubeconfig label ns ${TARGET_NAMESPACE} name=${TARGET_NAMESPACE}
            kubectl --kubeconfig=/etc/kubeconfig label ns ${TARGET_NAMESPACE} taco-tls=enabled
            log "INFO" "${TARGET_NAMESPACE} successfully created."
          fi
      env:
        - name: TARGET_NAMESPACE
          value: '{{inputs.parameters.target_namespace}}'
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2

  - name: determineIfaManagedCluster
    inputs:
      parameters:
        - name: cluster_id
    container:
      name: cluster-init
      image: harbor-cicd.taco-cat.xyz/tks/tks-cluster-init:v1.0.0
      command:
        - /bin/bash
        - '-exc'
        - |
          cp /kube/value kubeconfig_adm
          export KUBECONFIG=kubeconfig_adm

          # check whether this workload cluster is managed or not
          kcp_count=$(kubectl get kcp -n $CLUSTER_ID $CLUSTER_ID | grep -v NAME | wc -l)
          awsmcp_count=$(kubectl get awsmcp -n $CLUSTER_ID $CLUSTER_ID | grep -v NAME | wc -l)

          if [ $kcp_count = 1 ]; then
            echo false | tee /mnt/out/managed_cluster.txt
          elif [ $awsmcp_count = 1 ]; then
            echo true | tee /mnt/out/managed_cluster.txt
          else
            echo "Wrong Cluster type!"
            exit 1
          fi
      volumeMounts:
      - name: kubeconfig-adm
        mountPath: "/kube"
      - name: out
        mountPath: /mnt/out
      env:
      - name: CLUSTER_ID
        value: "{{ inputs.parameters.cluster_id }}"
    volumes:
      - name: out
        emptyDir: { }
      - name: kubeconfig-adm
        secret:
          secretName: tks-admin-kubeconfig-secret
    outputs:
      parameters:
      - name: managed_cluster
        valueFrom:
          default: "Something wrong"
          path: /mnt/out/managed_cluster.txt

  - name: GetMyThanosScEndpoint
    inputs:
      parameters:
      - name: target_namespace
    outputs:
      parameters:
      - name: my_thanos_sc_ep
        valueFrom:
          path: /mnt/out/thanos_sc_ep.txt
    volumes:
    - name: out
      emptyDir: {}
    container:
      name: 'get-thanos-ep'
      image: harbor-cicd.taco-cat.xyz/tks/hyperkube:v1.18.6
      envFrom:
      - secretRef:
          name: "git-svc-token"
      env:
        - name: TARGET_NAMESPACE
          value: '{{inputs.parameters.target_namespace}}'
      volumeMounts:
      - name: out
        mountPath: /mnt/out
      command:
        - /bin/bash
        - '-c'
        - |
          kube_secret=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-tks-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
          echo -e "kube_secret:\n$kube_secret" | head -n 5
          cat <<< "$kube_secret" > /etc/kubeconfig

          THANOS_SC_PORT='10901'
          THANOS_SC_SVC='lma-thanos-external'
          thanos_sc_ep=$(kubectl --kubeconfig=/etc/kubeconfig get svc ${THANOS_SC_SVC} -n ${TARGET_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [[ -z "$thanos_sc_ep" ]]; then
            echo "Error: could not retrieve thanos sidecar endpoint from service resource."
            exit 1
          else
            echo "$thanos_sc_ep:$THANOS_SC_PORT" > /mnt/out/thanos_sc_ep.txt
          fi

  - name: collectThanosScEndpoints
    inputs:
      parameters:
      - name: tks_info_host
      - name: app_group_id
    outputs:
      parameters:
      - name: outwards_cluster_list
        valueFrom:
          path: /mnt/out/cluster_list.txt
      - name: inwards_endpoint_map
        valueFrom:
          path: /mnt/out/inwards_endpoint.txt
      - name: cur_cluster_name
        valueFrom:
          path: /mnt/out/cur_cluster_name.txt
    volumes:
    - name: out
      emptyDir: {}
    script:
      name: 'collect'
      image: harbor-cicd.taco-cat.xyz/tks/centos-tks-api:v1.0
      command: ["python"]
      envFrom:
      - secretRef:
          name: "git-svc-token"
      - secretRef:
          name: "tks-api-secret"
      volumeMounts:
      - name: out
        mountPath: /mnt/out
      source: |
        import sys
        import os
        import git
        import requests
        import json

        TKS_API_URL = "{{workflow.parameters.tks_info_host}}"
        CLUSTER_ID = "{{workflow.parameters.cluster_id}}"
        #CLUSTER_ID = "caldcde6u"
        #CLUSTER_ID = "c6fk1w3dm"

        def getToken() :
            data = {
                'organizationId' : os.environ['ORGANIZATION_ID'],
                'accountId': os.environ['ACCOUNT_ID'],
                'password' : os.environ['PASSWORD']
            }

            res = requests.post(TKS_API_URL+"/api/1.0/auth/login", json = data )
            if res.status_code != 200 :
                return ''
            resJson = res.json()
            return resJson['user']['token']

        output_cluster_list = []
        temp_map = {}
        inwards_endpoint_list = []
        inwards_endpoint_map = {}
        outwards_endpoint_map = {}

        TOKEN=getToken()

        res = requests.get(TKS_API_URL+"/api/1.0/clusters/" + CLUSTER_ID,
            headers={"Authorization": "Bearer " + TOKEN} )
        if res.status_code != 200 :
            sys.exit('Failed to get cluster')

        cluster = res.json()['cluster']
        print( cluster )
        organizationId = cluster['organizationId']
        cur_cluster_name = cluster['id']

        res = requests.get(TKS_API_URL+"/api/1.0/clusters?organizationId=" + organizationId,
            headers={"Authorization": "Bearer " + TOKEN} )
        if res.status_code != 200 :
            sys.exit('Failed to get clusters')

        clusters = res.json()['clusters']

        print("Iterating over clusters in the same contract...")

        # Iterate over cluster list except current cluster #
        for cluster in clusters:
            if cluster['status'] != "RUNNING":
              continue

            if cluster['id'] != CLUSTER_ID :
              print("*******************************************")
              print("Checking cluster: {}".format(cluster['id']))

              gitBaseUrl = os.environ['GIT_SVC_URL'].replace("http://","")
              print( gitBaseUrl )


              print("Checking if corresponding cluster repo exists..")
              #url = "@github.com/{{workflow.parameters.github_account}}/{}".format(cluster['id'])
              url = "@" + gitBaseUrl + "/" + os.environ['USERNAME'] + "/" + cluster['id']
              print( url )

              repoUrl = "http://" + os.environ['TOKEN'] + url
              try:
                repo = git.Repo.clone_from(repoUrl, './tempcluster')

              except git.exc.GitCommandError as e:
                print(e)
                print("Repo {} doesn't exist. Skipping this cluster..".format(repoUrl))
                continue

              res = requests.get(TKS_API_URL+"/api/1.0/app-groups?clusterId=" + cluster['id'],
                  headers={"Authorization": "Bearer " + TOKEN} )
              if res.status_code != 200 :
                  print( 'Failed to get appgroups for cluster ')
                  continue

              appGroups = res.json()['appGroups']
              print( appGroups )

              os.system("rm -rf ./tempcluster")

              # Check if LMA group exists.
              for appGroup in appGroups:
                if appGroup['appGroupType'] == "LMA" :
                  print("Found LMA appGroup: {}".format(appGroup['name']))

                  res = requests.get(TKS_API_URL+"/api/1.0/app-groups/" + appGroup['id'] + "/applications?applicationType=PROMETHEUS",
                      headers={"Authorization": "Bearer " + TOKEN} )
                  if res.status_code != 200 :
                      print( 'Failed to get applications for appgroup')
                      continue

                  applications = res.json()['applications']
                  if applications :
                    # This is based on the premise that there's only one prometheus per appGroup.
                    endpoint = applications[0]['endpoint']
                    print("Get Thanos-sc endpoint: {}. Appending it to inward list.".format(endpoint))

                    # Add this cluster's endpoint to endpoint map
                    inwards_endpoint_list.append(endpoint)

                    # Add this cluster to outward list so that current ep is updated to this cluster
                    temp_map["name"] = cluster['id']
                    str_json = json.dumps(temp_map)
                    output_cluster_list.append(str_json)


        # Compose profer format to be used as input on next step
        inwards_endpoint_map['querier.stores'] = inwards_endpoint_list

        ###########################
        # Construct output params #
        ###########################
        len_list = len(output_cluster_list)

        with open("/mnt/out/cluster_list.txt", "w") as f:
          f.write('[')

          print("*** Outwards Cluster List ***")
          for idx, item in enumerate(output_cluster_list, start=1):
            print("item {}: {}".format(idx, item))
            f.write(item.strip("'"))
            if idx < len_list:
              f.write(',')
          f.write(']')

        with open("/mnt/out/inwards_endpoint.txt", "w") as f:
          str_inwards_endpoint = repr(inwards_endpoint_map)
          f.write(str_inwards_endpoint)

        with open("/mnt/out/cur_cluster_name.txt", "w") as f:
          f.write(cur_cluster_name)

  - name: create-keycloak-client
    inputs:
      parameters:
      - name: organization_id
      - name: cluster_id
      - name: keycloak_url
    outputs:
      parameters:
        - name: keycloak_client_secret
          valueFrom:
            path: /mnt/out/keycloak_client_secret.txt
        - name: grafana_endpoint
          valueFrom:
            path: /mnt/out/grafana_endpoint.txt
    volumes:
      - name: out
        emptyDir: {}
    container:
      name: create-keycloak-client
      image: 'harbor-cicd.taco-cat.xyz/tks/shyaml_jq_yq_kubectl_python:3.11'
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }

          organization_id={{inputs.parameters.organization_id}}
          cluster_id={{inputs.parameters.cluster_id}}
          keycloak_url={{inputs.parameters.keycloak_url}}

          #################
          # Get endpoints
          #################

          endpoint=\"grafa\"
          kube_secret=$(kubectl get secret -n ${cluster_id} ${cluster_id}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
          cat <<< "$kube_secret" > kubeconfig
          if [ `kubectl --kubeconfig=kubeconfig get svc -n lma grafana --ignore-not-found=true | grep -v NAME | wc -l ` -eq 1 ]; then
            while [ -z $(kubectl --kubeconfig=kubeconfig get svc -n lma grafana -o jsonpath="{.status.loadBalancer.ingress[*].hostname}") ]
            do
              if [ "$(kubectl --kubeconfig=kubeconfig get svc -n lma grafana -o jsonpath="{.spec.type}")" -neq "LoadBalancer" ]; then
                log "FAIL" "A service for the grafana in ${cluster_id} is not configured properly.(No LoadBalancer)"
                exit -1
              fi

              echo "Waiting for generating the loadbalancer of grafana(3s)"
              sleep 3
            done

            endpoint=$(kubectl --kubeconfig=kubeconfig get svc -n lma grafana -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          else
            log "WARN" "Cluster(${cluster_id}) has no grafana"
          fi


          # Login to keycloak
          admin_username=$(kubectl get secret -n keycloak credential-tks-keycloak -o jsonpath="{.data.ADMIN_USERNAME}" | base64 -d)
          admin_password=$(kubectl get secret -n keycloak credential-tks-keycloak -o jsonpath="{.data.ADMIN_PASSWORD}" | base64 -d)
          TOKEN=$(curl -s -k -X POST ${keycloak_url}/auth/realms/master/protocol/openid-connect/token -d grant_type=password -d username=${admin_username} -d password=${admin_password} -d client_id=admin-cli | jq -r '.access_token')

          

          client_uuid=$(curl -s -k GET -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" ${keycloak_url}/auth/admin/realms/${organization_id}/clients\?\clientId\=grafana | jq -r ' .[] | {id} | .id')
          if [ -z "$client_uuid" ]; then
            # Create client
          
            printf '{
                "clientId" : "grafana",
                "directAccessGrantsEnabled": true,
                "standardFlowEnabled": true,
                "redirectUris": ["http://%s/*"]
            }\n' "$endpoint" > client.json
            
            curl -s -k POST -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" -d @client.json ${keycloak_url}/auth/admin/realms/${organization_id}/clients
            client_uuid=$(curl -s -k GET -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" ${keycloak_url}/auth/admin/realms/${organization_id}/clients\?\clientId\=grafana | jq -r ' .[] | {id} | .id')
            secret=$(curl -s -k GET -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" -d '{"type":"secret"}' ${keycloak_url}/auth/admin/realms/${organization_id}/clients/${client_uuid}/client-secret | jq -r '.value')
          else
            # Reuse client
            echo "client already exist"
            JSON_DATA=$(curl -s -k GET -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" ${keycloak_url}/auth/admin/realms/${organization_id}/clients\?\clientId\=grafana)

            # Convert the array to a JSON array
            MODIFIED_JSON=$(echo "$JSON_DATA" | jq --arg endpoint "http://$endpoint/*" 'map(.redirectUris += [$endpoint] | {redirectUris: .redirectUris})')
            MODIFIED_JSON=$(echo $MODIFIED_JSON | jq '.[0]')
          
            # Write the JSON array to a new file
            echo "$MODIFIED_JSON" > modified_data.json
            curl -s -k -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" -d @modified_data.json ${keycloak_url}/auth/admin/realms/${organization_id}/clients/${client_uuid} 
            secret=$(curl -s -k GET -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" ${keycloak_url}/auth/admin/realms/${organization_id}/clients/${client_uuid}/client-secret | jq -r '.value')
          fi

          echo ${secret} > /mnt/out/keycloak_client_secret.txt
          echo ${endpoint} > /mnt/out/grafana_endpoint.txt

      envFrom:
        - secretRef:
            name: tks-api-secret
      volumeMounts:
        - name: out
          mountPath: /mnt/out

  - name: update-auth-oidc-grafana
    inputs:
      parameters:
        - name: organization_id
        - name: cluster_id
        - name: keycloak_client_secret
        - name: grafana_endpoint
        - name: console_url

    container:
      name: update-auth-oidc-grafana
      image: 'harbor-cicd.taco-cat.xyz/tks/shyaml_jq_yq_kubectl_python:3.11'
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }

          organization_id={{inputs.parameters.organization_id}}
          cluster_id={{inputs.parameters.cluster_id}}
          keycloak_client_secret={{inputs.parameters.keycloak_client_secret}}
          grafana_endpoint={{inputs.parameters.grafana_endpoint}}

          #################
          # updates
          #################
          GIT_ACCOUNT={{workflow.parameters.github_account}}
          if  [[ $GIT_SVC_URL == https://* ]]; then
            repository_base=https://${TOKEN//[$'\t\r\n ']}@${GIT_SVC_URL/http:\/\//}/${GIT_ACCOUNT}/
          else
            repository_base=http://${TOKEN//[$'\t\r\n ']}@${GIT_SVC_URL/http:\/\//}/${GIT_ACCOUNT}/
          fi

          GIT_SVC_HTTP=${GIT_SVC_URL%://*}
          GIT_SVC_BASE_URL=${GIT_SVC_URL#*//}
          git clone $GIT_SVC_HTTP://$(echo -n $TOKEN)@${GIT_SVC_BASE_URL}/${USERNAME}/${cluster_id}.git
          cd ${cluster_id}

          # Update grafana client secret
          yq -i e  ".global.grafanaDomain=\"${grafana_endpoint}\"" ${cluster_id}/lma/site-values.yaml
          yq -i e  ".global.grafanaClientSecret=\"${keycloak_client_secret}\"" ${cluster_id}/lma/site-values.yaml
          yq -i e  ".global.consoleUrl=\"${console_url}\"" ${cluster_id}/lma/site-values.yaml

          git config --global user.name "tks"
          git config --global user.email "tks@sktelecom.com"

          log "INFO" "##### commit changes grafana domain and root_url on ${cluster_id} to ${grafana_endpoint} and ${grafana_endpoint}/grafana"
          cmessage="changes grafana domain and root_url on ${cluster_id} to ${grafana_endpoint} and ${grafana_endpoint}/grafana"
          git add ${cluster_id}/lma/site-values.yaml
          git commit -m "change values on grafana.ini.server." -m "$cmessage"
          git push

      envFrom:
        - secretRef:
            name: "git-svc-token"
        - secretRef:
            name: "tks-api-secret"

  - name: argocd-sync-wait
    inputs:
      parameters:
        - name: cluster_id
    container:
      name: argocd-sync-wait
      image: harbor-cicd.taco-cat.xyz/tks/argocd-cli:v2.2.5
      command:
        - /bin/bash
        - '-c'
        - |
          # log into Argo CD server
          ./argocd login $ARGO_SERVER --plaintext --insecure --username $ARGO_USERNAME \
          --password $ARGO_PASSWORD
          
          app_name={{inputs.parameters.cluster_id}}-grafana
          
          # sync app
          echo "sync app $app_name"
          ./argocd app sync $app_name
          
          # wait for sync
          ./argocd app wait $app_name --sync 

      envFrom:
        - secretRef:
            name: "decapod-argocd-config"
    activeDeadlineSeconds: 900

  - name: grafana-restart
    inputs:
      parameters:
        - name: cluster_id
    container:
      name: grafana-restart
      image: 'harbor-cicd.taco-cat.xyz/tks/shyaml_jq_yq_kubectl_python:3.11'
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }

          cluster_id={{inputs.parameters.cluster_id}}

          kube_secret=$(kubectl get secret -n ${cluster_id} ${cluster_id}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
          cat <<< "$kube_secret" > kubeconfig
          pods=$(kubectl --kubeconfig kubeconfig get pods -n lma | grep grafana | awk '{print $1}')
  
          for pod in $pods
          do
            echo "Deleting pod $pod"
            kubectl --kubeconfig kubeconfig delete pod $pod -n lma --ignore-not-found=true
          done

      envFrom:
        - secretRef:
            name: tks-api-secret
    activeDeadlineSeconds: 900
