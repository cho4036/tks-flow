apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tks-remove-lma-federation
  namespace: argo
spec:
  entrypoint: removeLMA
  arguments:
    parameters:
    - name: app_group
      value: "lma"
    - name: github_account
      value: "decapod10"
    - name: tks_info_host
      value: "http://tks-api.tks.svc:9110"
    - name: organization_id
      value: "ohxwkh7iy"
    - name: cluster_id
      value: "c750jgmy8"
    - name: app_group_id
      value: "aey4niy0a"
    ##########################
    # For removeLMA task #
    ##########################
    - name: app_prefix
      value: "{{workflow.parameters.cluster_id}}"
    - name: filter
      value: "app={{workflow.parameters.cluster_id}}-{{workflow.parameters.app_group}}"
  volumes:
  - name: tks-proto-vol
    configMap:
      name: tks-proto
  templates:
  - name: removeLMA
    steps:
    - - name: removeAppGroup
        templateRef:
          name: remove-lma-federation
          template: process

    - - name: deleteNamespace
        template: deleteNamespace
        arguments:
          parameters:
            - name: target_namespace
              value: "lma"

    - - name: get-clusters-in-contract
        templateRef:
          name: tks-primary-cluster
          template: sub-get-cluster

    - - name: update-eps-for-thanos
        templateRef:
          name: tks-primary-cluster
          template: update-eps-for-thanos
        arguments:
          parameters:
          - name: primary_cluster
            value: '{{steps.get-clusters-in-contract.outputs.parameters.primary_cluster}}'
          - name: member_clusters
            value: '{{steps.get-clusters-in-contract.outputs.parameters.member_clusters}}'

  #######################
  # Template Definition #
  #######################
  - name: deleteNamespace
    inputs:
      parameters:
        - name: target_namespace
    container:
      name: delete-namespace
      image: harbor-cicd.taco-cat.xyz/tks/hyperkube:v1.18.6
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }

          kube_params=""

          if [[ -n "{{workflow.parameters.cluster_id}}" ]]; then
            kube_secret=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
            echo -e "kube_secret:\n$kube_secret" | head -n 5
            cat <<< "$kube_secret" > /etc/kubeconfig

            kube_params+="--kubeconfig=/etc/kubeconfig"
          fi

          kubectl $kube_params get ns ${TARGET_NAMESPACE}
          if [[ $? =~ 0 ]]; then
            kubectl $kube_params delete ns ${TARGET_NAMESPACE}
            log "INFO" "${TARGET_NAMESPACE} was successfully deleted."
          fi
      env:
        - name: TARGET_NAMESPACE
          value: '{{inputs.parameters.target_namespace}}'
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2

  - name: collectClusterList
    inputs:
      parameters:
      - name: tks_info_host
      - name: app_group_id
    outputs:
      parameters:
      - name: outwards_cluster_list
        valueFrom:
          path: /mnt/out/cluster_list.txt
    volumes:
    - name: out
      emptyDir: {}
    script:
      name: 'collect'
      image: harbor-cicd.taco-cat.xyz/tks/centos-tks-api:v1.0
      command: ["python"]
      envFrom:
      - secretRef:
          name: "git-svc-token"
      - secretRef:
          name: "tks-api-secret"
      volumeMounts:
      - name: out
        mountPath: /mnt/out
      source: |
        import sys
        import os
        import json
        import git
        import requests

        TKS_API_URL = "{{workflow.parameters.tks_info_host}}"
        CLUSTER_ID = "{{workflow.parameters.cluster_id}}"


        def getToken() :
            data = {
                'organizationId' : os.environ['ORGANIZATION_ID'],
                'accountId': os.environ['ACCOUNT_ID'],
                'password' : os.environ['PASSWORD']
            }

            res = requests.post(TKS_API_URL+"/api/1.0/auth/login", json = data )
            if res.status_code != 200 :
                return ''
            resJson = res.json()
            return resJson['user']['token']

        output_cluster_list = []
        temp_map = {}
        outwards_endpoint_map = {}

        TOKEN=getToken()

        res = requests.get(TKS_API_URL+"/api/1.0/clusters/" + CLUSTER_ID,
            headers={"Authorization": "Bearer " + TOKEN} )
        if res.status_code != 200 :
            sys.exit('Failed to get cluster')

        cluster = res.json()['cluster']
        print( cluster )
        organizationId = cluster['organizationId']
        cur_cluster_name = cluster['id']

        res = requests.get(TKS_API_URL+"/api/1.0/clusters?organizationId=" + organizationId,
            headers={"Authorization": "Bearer " + TOKEN} )
        if res.status_code != 200 :
            sys.exit('Failed to get clusters')

        clusters = res.json()['clusters']

        print("Iterating over clusters in the same contract...")

        # Iterate over cluster list except current cluster #
        for cluster in clusters:
            if cluster['status'] != "RUNNING":
                continue

            if cluster['id'] != CLUSTER_ID :
                print("*******************************************")
                print("Checking cluster: {}".format(cluster['id']))

                gitBaseUrl = os.environ['GIT_SVC_URL'].replace("http://","")
                print( gitBaseUrl )

                print("Checking if corresponding cluster repo exists..")
                url = "@" + gitBaseUrl + "/" + os.environ['USERNAME'] + "/" + cluster['id']
                print( url )

                repoUrl = "http://" + os.environ['TOKEN'] + url
                try:
                    repo = git.Repo.clone_from(repoUrl, './tempcluster')

                except git.exc.GitCommandError as e:
                    print(e)
                    print("Repo {} doesn't exist. Skipping this 'cluster..".format(repoUrl))
                    continue

                res = requests.get(TKS_API_URL+"/api/1.0/app-groups?clusterId=" + cluster['id'],
                    headers={"Authorization": "Bearer " + TOKEN} )
                if res.status_code != 200 :
                    print( 'Failed to get appgroups for cluster ')
                    continue

                appGroups = res.json()['appGroups']
                print( appGroups )

                os.system("rm -rf ./tempcluster")

                # Check if LMA group exists.
                for appGroup in appGroups:
                    if appGroup['appGroupType'] == "LMA" :
                        print("Found LMA appGroup: {}".format(appGroup['name']))

                        # Add this cluster to outward list so that current ep is updated to this cluster
                        temp_map["name"] = cluster['id']
                        str_json = json.dumps(temp_map)
                        output_cluster_list.append(str_json)


        ###########################
        # Construct output params #
        ###########################
        len_list = len(output_cluster_list)

        with open("/mnt/out/cluster_list.txt", "w") as f:
            f.write('[')

            print("*** Outwards Cluster List ***")
            for idx, item in enumerate(output_cluster_list, start=1):
                print("item {}: {}".format(idx, item))
                f.write(item.strip("'"))
                if idx < len_list:
                    f.write(',')
            f.write(']')

