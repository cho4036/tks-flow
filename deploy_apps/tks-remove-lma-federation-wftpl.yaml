apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tks-remove-lma-federation
  namespace: argo
spec:
  entrypoint: removeLMA
  arguments:
    parameters:
    - name: app_group
      value: "lma"
    - name: site_repo_url
      value: "https://github.com/openinfradev/decapod-site"
    ##########################
    # For updateTksInfo task #
    ##########################
    - name: tks_info_host
      value: "127.0.0.1"
    - name: cluster_id
      value: "abbead61-ff2a-4af4-8f41-d2c44c745de7"
    - name: app_group_id
      value: "abbead61-ff2a-4af4-8f41-d2c44c745de7"
    ##########################
    # For removeLMA task #
    ##########################
    - name: app_prefix
      value: "{{=sprig.substr(0, 8, workflow.parameters.cluster_id)}}"
    - name: filter
      value: "app={{=sprig.substr(0, 8, workflow.parameters.cluster_id)}}-{{workflow.parameters.app_group}}"
  volumes:
  - name: tks-proto-vol
    configMap:
      name: tks-proto
  templates:
  - name: removeLMA
    steps:
    - - name: removeAppGroup
        templateRef:
          name: remove-lma-federation
          template: process

    - - name: deleteNamespace
        template: deleteNamespace
        arguments:
          parameters:
            - name: target_namespace
              value: "lma"

    - - name: updateTksInfo
        templateRef:
          name: delete-tks-app-group-info
          template: deleteTksAppGroup
     
      # LMA appGroup specific task #
    - - name: collectClusterList
        template: collectClusterList
        arguments:
          # These params should be moved to global argument? #
          parameters:
          - name: tks_info_host
            value:  "{{ workflow.parameters.tks_info_host }}"
          - name: cluster_id
            value: "{{ workflow.parameters.cluster_id }}"
          - name: app_group_id
            value: "{{ workflow.parameters.app_group_id }}"
          # Again, how can this be determined?
          - name: cur_endpoint
            value: "thanos-sidecar.cluster_xy"

    # Delete endpoint from other cluster's manifests
    - - name: updateDecapodManifestOutwards
        templateRef:
          name: update-decapod-manifest
          template: updateManifest
        arguments:
          parameters:
          - name: action
            value: "delete"
          - name: cluster_name
            value: "{{item.name}}"
          - name: app_group
            value: "{{workflow.parameters.app_group}}"
          - name: chart
            value: "thanos"
          ## {"querier.stores": "CURRENT_ENDPOINT"}
          - name: kv_map_str 
            value: "{{steps.collectClusterList.outputs.parameters.outwards_endpoint_map}}"
        withParam: "{{steps.collectClusterList.outputs.parameters.outwards_cluster_list}}"

  #######################
  # Template Definition #
  #######################
  - name: deleteNamespace
    arguments: {}
    inputs:
      parameters:
        - name: target_namespace
    container:
      name: delete-namespace
      image: 'k8s.gcr.io/hyperkube:v1.18.6'
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }

          kube_params=""

          if [[ -n "{{workflow.parameters.cluster_id}}" ]]; then
            kube_secret=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
            echo -e "kube_secret:\n$kube_secret" | head -n 5
            cat <<< "$kube_secret" > /etc/kubeconfig

            kube_params+="--kubeconfig=/etc/kubeconfig"
          fi

          kubectl $kube_params get ns ${TARGET_NAMESPACE}
          if [[ $? =~ 0 ]]; then
            kubectl $kube_params delete ns ${TARGET_NAMESPACE}
            log "INFO" "${TARGET_NAMESPACE} was successfully deleted."
          fi
      env:
        - name: TARGET_NAMESPACE
          value: '{{inputs.parameters.target_namespace}}'
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2

  - name: collectClusterList
    inputs:
      parameters:
      - name: tks_info_host
      - name: cluster_id
      - name: app_group_id
      - name: cur_endpoint
    outputs:
      parameters:
      - name: outwards_cluster_list
        valueFrom:
          path: /mnt/out/cluster_list.txt
      - name: outwards_endpoint_map
        valueFrom:
          path: /mnt/out/outwards_endpoint.txt
    volumes:
    - name: out
      emptyDir: {}
    script: 
      name: 'collect'
      image: sktdev/python-centos-wf-worker:v1.0
      command:
      - python
      env:
      - name: PYTHONPATH
        value: "/opt/protobuf/:/opt/rh/rh-python38/root/lib/python3.8/site-packages/:/opt/app-root/lib/python3.8/site-packages/"
      volumeMounts:
      - name: tks-proto-vol
        mountPath: "/opt/protobuf"
        readOnly: true
      - name: out
        mountPath: /mnt/out
      source: |
        import sys
        import google.protobuf
        import grpc
        import info_pb2
        import info_pb2_grpc
        import common_pb2
        import common_pb2_grpc
        import json

        output_cluster_list = []
        temp_map = {}
        outwards_endpoint_map = {}

        ip = "{{inputs.parameters.tks_info_host}}"
        # TODO: Make port workflow param?
        port = 9110
        addr = "%s:%d" % (ip, port)
        print("tks-info addr: %s" % addr)

        with grpc.insecure_channel(addr) as channel:
            cl_stub = info_pb2_grpc.ClusterInfoServiceStub(channel)
            app_stub = info_pb2_grpc.AppInfoServiceStub(channel)

            res = cl_stub.GetCluster(info_pb2.GetClusterRequest(cluster_id="{{inputs.parameters.cluster_id}}"))

            print("Response from GetCluster: ")
            print(res.cluster)
            contract_id = res.cluster.contract_id
            csp_id = res.cluster.csp_id
            cur_cluster_name = res.cluster.id

            res = cl_stub.GetClusters(info_pb2.GetClustersRequest(contract_id=contract_id, csp_id=''))

            print("Iterating over clusters in the same contract...")

            # Iterate over cluster list except current cluster #
            for cluster in res.clusters:
                if cluster.id != "{{inputs.parameters.cluster_id}}":
                  print("Found cluster: {}".format(cluster.id))
                  temp_map["name"] = cluster.id
                  str_json = json.dumps(temp_map)
                  output_cluster_list.append(str_json)

        # Update current endpoint to other cluster's site-yaml #
        outwards_endpoint_map['querier.stores'] = "{{inputs.parameters.cur_endpoint}}"

        ###########################
        # Construct output params #
        ###########################
        len_list = len(output_cluster_list)

        with open("/mnt/out/cluster_list.txt", "w") as f:
          f.write('[')

          for idx, item in enumerate(output_cluster_list, start=1):
            print("item {}: {}".format(idx, item))
            f.write(item.strip("'"))
            if idx < len_list:
              f.write(',')
          f.write(']')

        with open("/mnt/out/outwards_endpoint.txt", "w") as f:
          str_outwards_endpoint = repr(outwards_endpoint_map)
          f.write(str_outwards_endpoint)
