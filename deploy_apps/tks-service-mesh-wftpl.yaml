apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tks-service-mesh
  namespace: argo
spec:
  entrypoint: deploy
  arguments:
    parameters:
      - name: site_name
        value: hanu-reference
      - name: app_group
        value: service-mesh
      - name: manifest_repo_url
        value: 'https://github.com/openinfradev/decapod-manifests'
      - name: revision
        value: main
  templates:
    - name: deploy
      dag:
        tasks:
          - name: create-eck-secret
            template: copy-eck-secret
            arguments:
              parameters:
                - name: secret_name
                  value: eck-elasticsearch-es-http-certs-public
                - name: source_namespace
                  value: lma
                - name: target_namespace
                  value: istio-system
                - name: kubeconfig_secret_name
                  value: "{{workflow.parameters.site_name}}-kubeconfig"
          - name: istio-operator
            arguments:
              parameters:
                - name: list
                  value: |
                    [
                      { "path": "istio-operator", "namespace": "istio-operator" }
                    ]
            templateRef:
              name: create-application
              template: installApps
            dependencies:
              - create-eck-secret
          - name: istio-controlplane
            arguments:
              parameters:
                - name: list
                  value: |
                    [
                      { "path": "servicemesh-controlplane", "namespace": "istio-system" }
                    ]
            templateRef:
              name: create-application
              template: installApps
            dependencies:
              - istio-operator
          - name: istio-gateway
            arguments:
              parameters:
                - name: list
                  value: |
                    [
                      { "path": "servicemesh-gateway", "namespace": "istio-system" }
                    ]
            templateRef:
              name: create-application
              template: installApps
            dependencies:
              - istio-controlplane
          - name: jaeger-kiali-operator
            arguments:
              parameters:
                - name: list
                  value: |
                    [
                      { "path": "jaeger-operator", "namespace": "istio-system" },
                      { "path": "kiali-operator", "namespace": "istio-system" }
                    ]
            templateRef:
              name: create-application
              template: installApps
            dependencies:
              - istio-controlplane
          - name: servicemesh-jaeger-kiali-resource
            arguments:
              parameters:
                - name: list
                  value: |
                    [
                      { "path": "servicemesh-jaeger-resource", "namespace": "istio-system" },
                      { "path": "servicemesh-kiali-resource", "namespace": "istio-system" }
                    ]
            templateRef:
              name: create-application
              template: installApps
            dependencies:
              - jaeger-kiali-operator
          - name: grafana-prometheus-resource
            arguments:
              parameters:
                - name: list
                  value: |
                    [
                      { "path": "servicemesh-grafana-dashboard", "namespace": "istio-system" },
                      { "path": "servicemesh-prometheusmonitor", "namespace": "istio-system" },
                      { "path": "servicemesh-prometheusrule", "namespace": "istio-system" }
                    ]
            templateRef:
              name: create-application
              template: installApps
            dependencies:
              - jaeger-kiali-operator
          - name: sync-app
            template: sync-app
            arguments:
              parameters:
                - name: site_name
                  value: "{{workflow.parameters.site_name}}"
            dependencies:
              - grafana-prometheus-resource
          - name: deploy-ingress-temporary
            template: deploy-ingress-temporary
            arguments:
              parameters:
                - name: site_name
                  value: "{{workflow.parameters.site_name}}"
                - name: kubeconfig_secret_name
                  value: "{{workflow.parameters.site_name}}-kubeconfig"
            dependencies:
              - sync-app
    - name: copy-eck-secret
      arguments: {}
      inputs:
        parameters:
          - name: secret_name
          - name: source_namespace
          - name: target_namespace
          - name: kubeconfig_secret_name
      outputs: {}
      metadata: {}
      container:
        name: copy-eck-secret
        image: 'k8s.gcr.io/hyperkube:v1.18.6'
        command:
          - /bin/bash
          - '-c'
          - |
            function log() {
              level=$1
              msg=$2
              date=$(date '+%F %H:%M:%S')
              echo "[$date] $level     $msg"
            }

            cat <<< "$KUBE_CONFIG" > /etc/kubeconfig

            kubectl --kubeconfig=/etc/kubeconfig get ns ${TARGET_NAMESPACE}
            if [[ $? =~ 1 ]]; then
              kubectl --kubeconfig=/etc/kubeconfig create ns ${TARGET_NAMESPACE}
              kubectl --kubeconfig=/etc/kubeconfig label ns ${TARGET_NAMESPACE} name=${SOURCE_NAMESPACE}
              kubectl --kubeconfig=/etc/kubeconfig label ns ${TARGET_NAMESPACE} taco-tls=enabled
              log "INFO" "${TARGET_NAMESPACE} successfully created."
            fi

            kubectl --kubeconfig=/etc/kubeconfig get secret ${SECRET_NAME}
            if [[ $? =~ 1 ]]; then
              kubectl --kubeconfig=/etc/kubeconfig get secret ${SECRET_NAME} -n ${SOURCE_NAMESPACE} -o yaml \
              | grep -v '^\s*namespace:\s' \
              | kubectl --kubeconfig=/etc/kubeconfig apply -n ${TARGET_NAMESPACE} -f -
              log "INFO" "${SECRET_NAME} successfully created."
            fi
        env:
          - name: SECRET_NAME
            value: '{{inputs.parameters.secret_name}}'
          - name: SOURCE_NAMESPACE
            value: '{{inputs.parameters.source_namespace}}'
          - name: TARGET_NAMESPACE
            value: '{{inputs.parameters.target_namespace}}'
          - name: KUBE_CONFIG
            valueFrom:
              secretKeyRef:
                name: "{{ inputs.parameters.kubeconfig_secret_name }}"
                key: value
        resources: {}
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 2
    - name: sync-app
      arguments: {}
      inputs:
        parameters:
          - name: site_name
      outputs: {}
      metadata: {}
      container:
        name: sync-app
        image: docker.io/sktcloud/argocd-cli:v2.2.5
        command:
          - /bin/bash
          - '-c'
          - |
            ./argocd login $ARGO_SERVER --plaintext --insecure --username $ARGO_USERNAME \
            --password $ARGO_PASSWORD

            export ARGOCD_APP_NAME=$(echo "${SITE_NAME:0:8}")-service-mesh

            ./argocd app sync -l app=$ARGOCD_APP_NAME
        env:
        - name: SITE_NAME
          value: '{{inputs.parameters.site_name}}'
        envFrom:
          - secretRef:
              name: decapod-argocd-config
        resources: {}
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 2
    - name: deploy-ingress-temporary
      inputs:
        parameters:
          - name: site_name
          - name: kubeconfig_secret_name
      container:
        name: deploy-ingress-temporary
        image: 'k8s.gcr.io/hyperkube:v1.18.6'
        command:
          - /bin/bash
          - '-c'
          - |
            function log() {
              level=$1
              msg=$2
              date=$(date '+%F %H:%M:%S')
              echo "[$date] $level     $msg"
            }

            function deploy_ingress() {
              ingress_name=$1
              namespace=$2
              host_name=$3
              service_name=$4
              service_port=$5

              kubectl --kubeconfig=/etc/kubeconfig get ing $ingress_name -n $namespace
              if [[ $? =~ 1 ]]; then
                cat <<EOF | kubectl --kubeconfig=/etc/kubeconfig apply -f -
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              annotations:
                kubernetes.io/ingress.class: nginx
              name: $ingress_name
              namespace: $namespace
            spec:
              rules:
              - host: $host_name
                http:
                  paths:
                  - pathType: ImplementationSpecific
                    backend:
                      service:
                        name: $service_name
                        port:
                          number: $service_port
              tls:
              - hosts:
                - $host_name
                secretName: taco-cat-tls
            EOF

                log "INFO" "${ingress_name} in ${namespace} successfully created."
              fi
            }

            GRAFANA_HOST=grafana-$(echo "${SITE_NAME:0:8}").taco-cat.xyz
            KIBANA_HOST=kibana-$(echo "${SITE_NAME:0:8}").taco-cat.xyz
            KIALI_HOST=kiali-$(echo "${SITE_NAME:0:8}").taco-cat.xyz

            cat <<< "$KUBE_CONFIG" > /etc/kubeconfig

            deploy_ingress "grafana" "lma" $GRAFANA_HOST "grafana" "80"
            deploy_ingress "kibana" "lma" $KIBANA_HOST "eck-kibana-kb-http" "5601"
            deploy_ingress "kiali" "istio-system" $KIALI_HOST "kiali" "20001"
        env:
          - name: SITE_NAME
            value: '{{inputs.parameters.site_name}}'
          - name: KUBE_CONFIG
            valueFrom:
              secretKeyRef:
                name: "{{ inputs.parameters.kubeconfig_secret_name }}"
                key: value
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 2
